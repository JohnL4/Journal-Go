# -*- mode: org -*-
#+TITLE: Notes on Writing an Angular 16 App with Material and All the Stuff
#+CATEGORY: ang16
#+COLUMNS: %12TODO %10WHO %3PRIORITY %Effort(Effort, Hrs){est+} %82ITEM
# #+INFOJS_OPT: view:showall toc:t ltoc:nil path:../org-info.js mouse:#B3F2E3
# Pandoc needs H:9; default is H:3.
# `^:nil' means raw underscores and carets are not interpreted to mean sub- and superscript.  (Use {} to force interpretation.)
#+OPTIONS: author:nil creator:t H:9 ^:{}
#+HTML_HEAD: <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=IBM+Plex+Mono:400,400i,600,600i|IBM+Plex+Sans:400,400i,600,600i|IBM+Plex+Serif:400,400i,600,600i">
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="org-mode.css" />

# Generates "up" and "home" links ("." is "current directory").  Can comment one out.
#+HTML_LINK_UP: .
#+HTML_LINK_HOME: _index.html

# Use ``#+ATTR_HTML: :class lower-alpha'' on line before list to use the following class.
# See https://emacs.stackexchange.com/a/18943/17421
# 
#+HTML_HEAD: <style type="text/css">
#+HTML_HEAD:  ol.lower-alpha { list-style-type: lower-alpha; }
#+HTML_HEAD: </style>

#+PROPERTY: header-args:plantuml :exports both :cache yes

* Overview 
** Column view
# C-c C-c in block to update or C-u C-c C-x C-u to update all such views in file from anywhere.
#+BEGIN: columnview :hlines 1 :id global :indent t
| TODO          | WHO | PRIORITY | Effort, Hrs | ITEM                                                                     |
|---------------+-----+----------+-------------+--------------------------------------------------------------------------|
|               |     | B        |             | Overview                                                                 |
|               |     | B        |             | \_  Column view                                                          |
|---------------+-----+----------+-------------+--------------------------------------------------------------------------|
|               |     | B        |             | Angular                                                                  |
|               |     | B        |             | \_  Typescript definite assignment                                       |
|               |     | B        |             | \_    How I solved it                                                    |
|               |     | B        |             | \_  Specify input and output from components                             |
|---------------+-----+----------+-------------+--------------------------------------------------------------------------|
|               |     | B        |             | SASS                                                                     |
| RESEARCH-DONE |     | B        |             | \_  How to specify that Angular components use =.scss= instead of =.css= |
|---------------+-----+----------+-------------+--------------------------------------------------------------------------|
|               |     | B        |             | Material                                                                 |
|               |     | B        |             | \_  Color theming                                                        |
|               |     | B        |             | \_  Light/dark theming                                                   |
| DONE          |     | B        |             | \_    App reloads after setting theme, negating effect of setting style  |
| DONE          |     | B        |             | \_    Need to load initially with my chosen lightblue-orange theme       |
| DONE          |     | B        |             | \_      Problem with typography and density not being active at first    |
|               |     | B        |             | \_  Auto light/dark theming                                              |
|               |     | B        |             | \_  Sidenav                                                              |
|               |     | B        |             | \_  How to add a new material component to the app                       |
|               |     | B        |             | \_  Elevation (?) issues                                                 |
|               |     | B        |             | \_  Icons                                                                |
|               |     | B        |             | \_  Columns of components (column-major layout)                          |
| DONE          |     | B        |             | \_  Make the toolbar stick to the top of the window/viewport             |
| RESEARCH-DONE |     | B        |             | \_  What is the behavior of Angular components in web page DOM?          |
|---------------+-----+----------+-------------+--------------------------------------------------------------------------|
|               |     | B        |             | Animated SVG (?)                                                         |
| DONE          |     | B        |             | \_  Need to animate hamburger-to-left-arrow and back                     |
|               |     | B        |             | \_    npm install hamburgers                                             |
|               |     | B        |             | \_    Angular does the equivalent of autoprefixer                        |
|---------------+-----+----------+-------------+--------------------------------------------------------------------------|
|               |     | B        |             | SSR of theme preference?                                                 |
|---------------+-----+----------+-------------+--------------------------------------------------------------------------|
|               |     | B        |             | Authentication (auth0)                                                   |
|---------------+-----+----------+-------------+--------------------------------------------------------------------------|
|               |     | B        |             | SSL cert (let's encrypt?)                                                |
|               |     | B        |             | \_  Golang autocert                                                      |
|---------------+-----+----------+-------------+--------------------------------------------------------------------------|
|               |     | B        |             | Client-side encryption                                                   |
|               |     | B        |             | \_  Store key in 3rd-party Auth service?                                 |
|---------------+-----+----------+-------------+--------------------------------------------------------------------------|
|               |     | B        |             | Wireframe                                                                |
|               |     | B        |             | \_  Figma?                                                               |
|               |     | B        |             | \_  Balsamic?                                                            |
#+END:
* Angular

** Typescript definite assignment

   Got compiler errors from the theme-switch post below.  Basically, I think we need to convince the compiler that

   #+BEGIN_SRC tide
     options$: Observable<Array<Option>> = this.themeService.getThemeOptions();
   #+END_SRC

   Never assigns a null to =options$=.  Or possibly, that =themeService.getThemeOptions()= never returns a null.

   Looks like the statement of the problem is here: https://angular.io/guide/template-typecheck#strict-null-checks.

*** How I solved it

    The problem is the =async= operator.  On a fundamental level, we're getting the list of theme options from the
    server, and there's no guarantee the server API call has returned yet.  In that case, when =async= is evaluated,
    it's forced to return null, so we could wind up with a null.

    I could wrap the entire =async= pipeline in a definite-assignment assertion, as follows:

    : <app-menu [options]="(options$ | async)!" (themeChange)="themeChangeHandler($event)">

    and that makes the compiler error go away, but it doesn't make the null situation go away (and we'll probably still
    be getting a null from =async= b/c the server will not have returned yet).  Maybe that's fine?  Maybe this is just
    compiler warnings and we can just be slack and say "trust us, we'll get a definite value"?

** Specify input and output from components

   Decorate the class /member/ with =@Input()= or =@Output()=, not the class.

* SASS

** RESEARCH-DONE How to specify that Angular components use =.scss= instead of =.css=
   CLOSED: [2023-06-26 Mon 18:19]

   Maybe this?
   https://medium.com/motf-creations/migrate-from-css-to-scss-stylesheets-for-existing-angular-application-d61f8061f5b7

   The easy way documented in that article didn't quite work, but I think I was able to do it by hand.

   The problem was that /some/ =.scss= files existed already, so the tools refused to work.  They could maybe be made
   smarter, but not by me (at least, not right now).

* Material
** Color theming
** Light/dark theming

   https://indepth.dev/posts/1218/lets-implement-a-theme-switch-like-the-angular-material-site

*** DONE App reloads after setting theme, negating effect of setting style
    CLOSED: [2023-06-29 Thu 19:12]

    - CLOSING NOTE [2023-06-29 Thu 19:12] \\
      The problem was that I didn't have a path set up in my Go app for requests to urls starting with "/node_modules".  So,
      the Go app was returning the default path, =index.html=.
      
      Once I set up that path in Go, as below, it works fine.
      
      : r.Static("/node_modules", "./ng/node_modules")

      btw, This won't work with shipping product, since it's essentially pulling the predefined themes straight out of
      the dev folder's =node_modules= subdirectory.  We'd need to find a different way if we took this approach, plus we
      want the user to (maybe) define their own color scheme?  Maybe?
      #----------------------------------------------------------------

    After implementing the final step of this guide, I see the app reloading =index.html=, basically negating the
    effect. :(

*** DONE Need to load initially with my chosen lightblue-orange theme
    CLOSED: [2023-07-06 Thu 18:06]

    - CLOSING NOTE [2023-07-06 Thu 18:06]
    Turns out header-component's =ngOnInit()= loads the purple-amber color theme by default, at
    startup.  I can (at the moment) simply comment that out, so no theme is "loaded" on init, which
    leaves the theme I created in the root =styles.scss= in place, my lightblue-orange theme.

**** DONE Problem with typography and density not being active at first
     CLOSED: [2023-07-07 Fri 22:52]

     I got the colors to load, but the typography/density is off (still user browser default; also no good if I hammer
     in Roboto as the body font in =styles.scss=).

     Need to get a full theme in play.

     Installed @angular/material with the following options:

     #+BEGIN_EXAMPLE
        C:\Users\John\Development\go\Journal\ng> ng add @angular/material
       Skipping installation: Package already installed
       ? Choose a prebuilt theme name, or "custom" for a custom theme: Custom
       ? Set up global Angular Material typography styles? Yes
       ? Include the Angular animations module? Include and enable animations
     #+END_EXAMPLE

     After that, I didn't need to add =mat-typography= to my =body= element, but the typography is still different from
     the prebuilt themes.

     */BUT ALSO:/* Selecting "global" (I think) caused the behavior of the /prebuilt/ themes to change so now the
     typography matches.  (Maybe the prebuilt themes didn't have a typography settings, so they inherited the global
     setting???)
   
** Auto light/dark theming

   https://material.angular.io/guide/theming#multiple-themes-in-one-file

** Sidenav

   https://material.angular.io/components/sidenav/overview

   Imports go in =app.module.ts=.

** How to add a new material component to the app

   Where does the styling go?

   General styling goes in either the top-level =styles.scss= or =custom-theme.scss=.

   Don't forget to =@include mat.<component>-theme= when you use a new Material component.

** Elevation (?) issues

   My toolbar menu isn't coming up on top of my toolbar, but, rather, underneath it.

   [[file:material-menu-weirdness.png][file:material-menu-weirdness.png]]

   But I think the problem might be that I didn't =@include= the mat-menu style.

   It wasn't actually an elevation issue, but including the styles (or themes, whatever) did the trick.

** Icons

   The indepth.dev post uses the Material Google fonts.  They actually work by specifying ligatures, which normally
   means combinations like "fi" are replaced by a different glyph (maybe zoom in on the occurrence in this web page to
   see it in action).  There's no reason, as a font maker, you can't specify another ligature for a sequence of letters
   like "home" such that, when they occur, you replace them with their own glyph that looks like a house.

   So, the fonts are included in your web page by adding the following to your =index.html=, in the =head= section:

   : <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">

   Then you can include something like the following somewhere in your app:

   : <mat-icon class="icon">menu</mat-icon>

   (Note this is only set up for /icons/ right now, not symbols, apparently.)

** Columns of components (column-major layout)

   How to display more columns in wide-screen than in narrow.  Column-major order, basically.

** DONE Make the toolbar stick to the top of the window/viewport
   CLOSED: [2023-07-08 Sat 12:54]


   Use Angular Material elevation helpers, but those only affect shadows, not =z-index= (I guess they want to be
   conservative in their assumptions of the app's actual layers).  You can also explicitly set =z-index= in your
   stylesheet for the component.

   =position= and =top= work to make the toolbar stick, but without =z-index=, the content below still scrolls over the
   toolbar.  It's kind of weird, and I don't fully understand it.

   #+CAPTION: component html
   #+BEGIN_SRC html
     <mat-toolbar color="primary" class="mat-elevation-z4">
   #+END_SRC 

   #+CAPTION: component stylesheet (.scss)
   #+BEGIN_SRC scss
     mat-toolbar {
         position: sticky;
         top: 0;
         z-index: 4;
     }
   #+END_SRC 

** RESEARCH-DONE What is the behavior of Angular components in web page DOM?
   CLOSED: [2023-07-08 Sat 11:38]

   Chrome browser dev tools reports Angular components as DOM elements of their own (e.g., "mat-toolbar").  Are these
   DIV elements?  Or just attribute-free elements?  If the latter, how are they laid out (e.g., block context vs. flow
   context)?

   Looks like the answer is "arbitrary elements are /autonomous custom elements/, and they inherit from Element."  See
   https://developer.mozilla.org/en-US/docs/Web/API/Web_components/Using_custom_elements.

   I don't think it has layout properties, so the browser is blind to it, but it /can/ have a class name (or list of).
   Interestingly, it can't have a =style= attribute, although =HTMLElement= /can/.

** Datepicker label not properly nestled in field

   The label is sitting too high, so when I pick a date, the label gets pushed up under the topbar.

   | [[file:emacs_wJqd0uF4Bc.png][file:emacs_wJqd0uF4Bc.png]] | [[file:emacs_G2HZ3ipKEa.png][file:emacs_G2HZ3ipKEa.png]] |

* Animated SVG (?)

** DONE Need to animate hamburger-to-left-arrow and back
   CLOSED: [2023-07-08 Sat 16:09]

   - CLOSING NOTE [2023-07-08 Sat 16:09] \\
     I got it done, but:
        a. It's too big and doesn't use the toolbar's foreground color; and
        b. The javascript/animated CSS/whatever doesn't work on my Samsung Galaxy 8.
     So, maybe just ditch this fluorish.

   SVG animation thing?

*** npm install hamburgers

    https://www.npmjs.com/package/hamburgers#sass, q.v.

*** Angular does the equivalent of autoprefixer

    See https://stackoverflow.com/questions/65760020/use-autoprefixer-with-angular11

* SSR of theme preference?
* Authentication (auth0)
* SSL cert (let's encrypt?)
** Golang autocert
* Client-side encryption
** Store key in 3rd-party Auth service?
* Wireframe
** Figma?
** Balsamic?
